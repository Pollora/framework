<?php

declare(strict_types=1);

namespace Plugin\%plugin_namespace%;

use Pollora\Attributes\Action;
use Pollora\Hook\Domain\Contracts\Hooks;

/**
 * Main plugin class for %plugin_name%.
 *
 * This class serves as the entry point for the plugin and handles
 * the initialization of plugin components, hooks, and services.
 * 
 * Uses Pollora's attribute-based hook system for cleaner code organization.
 */
class %plugin_namespace%Plugin implements Hooks
{
    /**
     * Plugin version.
     *
     * @var string
     */
    protected string $version = '%plugin_version%';

    /**
     * Plugin slug.
     *
     * @var string
     */
    protected string $slug = '%plugin_slug%';

    /**
     * Plugin constructor.
     */
    public function __construct()
    {
        // Plugin initialization happens through attribute-based hooks
        // Service providers, routes, migrations, etc. are automatically handled by the Modules system
    }

    /**
     * Plugin activation callback.
     *
     * @return void
     */
    public function activate(): void
    {
        // Plugin activation logic
        // Example:
        // - Create database tables
        // - Set default options
        // - Schedule cron events
        
        // Flush rewrite rules
        flush_rewrite_rules();
    }

    /**
     * Plugin deactivation callback.
     *
     * @return void
     */
    public function deactivate(): void
    {
        // Plugin deactivation logic
        // Example:
        // - Clear scheduled cron events
        // - Clean up temporary data
        
        // Flush rewrite rules
        flush_rewrite_rules();
    }

    /**
     * Plugin uninstall callback.
     *
     * @return void
     */
    public static function uninstall(): void
    {
        // Plugin uninstall logic
        // Example:
        // - Remove database tables
        // - Delete plugin options
        // - Clean up all plugin data
    }

    /**
     * WordPress init hook callback.
     * 
     * This method is automatically called on the 'init' WordPress hook
     * thanks to the Action attribute.
     *
     * @return void
     */
    #[Action('init', priority: 10)]
    public function onInit(): void
    {
        // Initialize plugin functionality that requires WordPress to be fully loaded
        // Example:
        // - Register post types
        // - Register taxonomies
        // - Load text domain
        
        load_plugin_textdomain(
            $this->slug,
            false,
            dirname(plugin_basename(%PLUGIN_NAME%_PLUGIN_FILE)) . '/languages'
        );
    }


    /**
     * Example of multiple hooks on the same method.
     * 
     * This method will be called on both 'wp_loaded' and 'template_redirect' hooks.
     */
    #[Action('wp_loaded', priority: 20)]
    #[Action('template_redirect', priority: 10)]
    public function onWordPressLoaded(): void
    {
        // Code that runs when WordPress is fully loaded
        // This demonstrates how to use multiple Action attributes
    }

    /**
     * Example admin initialization.
     * 
     * This method is automatically called on the 'admin_init' WordPress hook
     * thanks to the Action attribute.
     */
    #[Action('admin_init', priority: 10)]
    public function onAdminInit(): void
    {
        // Initialize admin-specific functionality
        // Example:
        // - Register settings
        // - Add admin pages
        // - Handle admin-only features
    }

    /**
     * Example admin menu setup.
     * 
     * This method is automatically called on the 'admin_menu' WordPress hook
     * thanks to the Action attribute.
     */
    #[Action('admin_menu', priority: 10)]
    public function addAdminMenu(): void
    {
        // Add admin menu items
        // Example:
        // add_options_page(
        //     '%plugin_name% Settings',
        //     '%plugin_name%',
        //     'manage_options',
        //     $this->slug,
        //     [$this, 'renderSettingsPage']
        // );
    }

    /**
     * Get plugin version.
     *
     * @return string Plugin version
     */
    public function getVersion(): string
    {
        return $this->version;
    }

    /**
     * Get plugin slug.
     *
     * @return string Plugin slug
     */
    public function getSlug(): string
    {
        return $this->slug;
    }
}